.Net Core 中间件
中间件是一种装配到应用管道以处理请求和响应的中间组件，其中每个组件包含：
1、选择是否将请求传递到管道中的下一个组件；
2、可在管道中的下一个组件前后执行相关操作；
请求委托用于生成请求管道，请求委托处理每个HTTP请求。可使用Run、Map、Use扩展方法来配置请求委托。可将一个单独的请求委托并行指定的匿名方法（并行中间件），或在可重用的类中对其进行定义。这些可重用的类和并行匿名方法即为中间件，也称中间组件。请求管道中的每个中间组件负责调用管道中的下个组件，或使管道短路。当中间件短路时，它被称为“终端中间件”，因为它阻止了中间组件的进一步的处理请求。

使用IApplicationBuilder创建中间件管道
.Net Core 请求管道可以包含一系列的委托并进行依次调用。每个委托均可以在下一个委托前后执行操作。
Run 委托将会终止管道，因为它只有一个HttpContext的类型参数（context）而无next，所以无法对下一个中间件进行调用。
Use 将多个请求委托链接在一起，next参数表示调用下一个委托。可以通过不使用next参数是管道短路。但是在管道短路之后仍会处理next语句后面的代码。
Map 用作约定来创建管道分支。Map基于给定的请求路径的匹配项来创建请求管道分支。如果请求路径以给定路径开头，则执行分支

注意：在向客户端发送响应之后，针对HttpResponse的更改设置将会引发异常。例如：设置标头和状态代码将引发异常。 调用 next 后写入响应正文：
1、可能导致违反协议。 例如，写入的长度超过规定的 Content-Length。
2、可能损坏正文格式。 例如，向 CSS 文件中写入 HTML 页脚。

顺序
向 Startup.Configure 方法添加中间件组件的顺序定义了针对请求调用这些组件的顺序，以及响应的相反顺序。 此排序对于安全性、性能和功能至关重要。
以下 Startup.Configure 方法将为常见应用方案添加中间件组件：
1、异常/错误处理
2、HTTP 严格传输安全协议
3、HTTPS 重定向
4、静态文件服务器
5、Cookie 策略实施
6、身份验证
7、会话
8、MVC

Use、Run和Map
Run 委托将会终止管道，因为它只有一个HttpContext的类型参数（context）而无next，所以无法对下一个中间件进行调用。
Use 将多个请求委托链接在一起，next参数表示调用下一个委托。可以通过不使用next参数是管道短路。但是在管道短路之后仍会处理next语句后面的代码。
Map 用作约定来创建管道分支。Map基于给定的请求路径的匹配项来创建请求管道分支。如果请求路径以给定路径开头，则执行分支。使用 Map 时，将从 HttpRequest.Path 中删除匹配的线段，并针对每个请求将该线段追加到 HttpRequest.PathBase。
MapWhen 基于给定谓词的结果创建请求管道分支。 Func<HttpContext, bool> 类型的任何谓词均可用于将请求映射到管道的新分支。